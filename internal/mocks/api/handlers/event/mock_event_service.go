// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/aliskhannn/calendar-service/internal/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockeventService is a mock of eventService interface.
type MockeventService struct {
	ctrl     *gomock.Controller
	recorder *MockeventServiceMockRecorder
}

// MockeventServiceMockRecorder is the mock recorder for MockeventService.
type MockeventServiceMockRecorder struct {
	mock *MockeventService
}

// NewMockeventService creates a new mock instance.
func NewMockeventService(ctrl *gomock.Controller) *MockeventService {
	mock := &MockeventService{ctrl: ctrl}
	mock.recorder = &MockeventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockeventService) EXPECT() *MockeventServiceMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockeventService) CreateEvent(ctx context.Context, userID uuid.UUID, title, description string, date time.Time) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, userID, title, description, date)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockeventServiceMockRecorder) CreateEvent(ctx, userID, title, description, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockeventService)(nil).CreateEvent), ctx, userID, title, description, date)
}

// DeleteEvent mocks base method.
func (m *MockeventService) DeleteEvent(ctx context.Context, eventID, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, eventID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockeventServiceMockRecorder) DeleteEvent(ctx, eventID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockeventService)(nil).DeleteEvent), ctx, eventID, userID)
}

// GetEventsForDay mocks base method.
func (m *MockeventService) GetEventsForDay(ctx context.Context, userID uuid.UUID, date time.Time) ([]model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsForDay", ctx, userID, date)
	ret0, _ := ret[0].([]model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsForDay indicates an expected call of GetEventsForDay.
func (mr *MockeventServiceMockRecorder) GetEventsForDay(ctx, userID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsForDay", reflect.TypeOf((*MockeventService)(nil).GetEventsForDay), ctx, userID, date)
}

// GetEventsForMonth mocks base method.
func (m *MockeventService) GetEventsForMonth(ctx context.Context, userID uuid.UUID, date time.Time) ([]model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsForMonth", ctx, userID, date)
	ret0, _ := ret[0].([]model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsForMonth indicates an expected call of GetEventsForMonth.
func (mr *MockeventServiceMockRecorder) GetEventsForMonth(ctx, userID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsForMonth", reflect.TypeOf((*MockeventService)(nil).GetEventsForMonth), ctx, userID, date)
}

// GetEventsForWeek mocks base method.
func (m *MockeventService) GetEventsForWeek(ctx context.Context, userID uuid.UUID, date time.Time) ([]model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsForWeek", ctx, userID, date)
	ret0, _ := ret[0].([]model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsForWeek indicates an expected call of GetEventsForWeek.
func (mr *MockeventServiceMockRecorder) GetEventsForWeek(ctx, userID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsForWeek", reflect.TypeOf((*MockeventService)(nil).GetEventsForWeek), ctx, userID, date)
}

// UpdateEvent mocks base method.
func (m *MockeventService) UpdateEvent(ctx context.Context, eventID, userID uuid.UUID, title, description string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, eventID, userID, title, description, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockeventServiceMockRecorder) UpdateEvent(ctx, eventID, userID, title, description, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockeventService)(nil).UpdateEvent), ctx, eventID, userID, title, description, date)
}
