package router

import (
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"

	"github.com/aliskhannn/calendar-service/internal/api/handlers/auth"
	"github.com/aliskhannn/calendar-service/internal/api/handlers/event"
	"github.com/aliskhannn/calendar-service/internal/config"
	"github.com/aliskhannn/calendar-service/internal/middlewares"
)

// New creates and configures a new HTTP router for the calendar service.
// It sets up middleware, public routes for user authentication, and protected routes for event management.
// The router uses the provided authentication and event handlers, configuration, and logging channel.
//
// Parameters:
//   - authHandler: The handler for authentication-related endpoints (e.g., register, login).
//   - eventHandler: The handler for event-related endpoints (e.g., create, update, delete, get events).
//   - config: The application configuration, including JWT settings for authentication.
//   - logCh: The channel for sending log entries generated by the logger middleware.
//
// Returns:
//   - An HTTP handler configured with routes and middleware.
func New(authHandler *auth.Handler, eventHandler *event.Handler, config *config.Config, logCh chan<- middlewares.LogEntry) http.Handler {
	// Initialize a new Chi router.
	r := chi.NewRouter()

	// Apply global middleware.
	r.Use(middleware.RequestID)                 // adds a unique request ID to each request
	r.Use(middleware.RealIP)                    // sets the remote address to the real client IP
	r.Use(middleware.Recoverer)                 // recovers from panics and returns a 500 error
	r.Use(middleware.Timeout(15 * time.Second)) // sets a timeout of 15 seconds for requests
	r.Use(middlewares.Logger(logCh))            // logs request details to the provided log channel

	// Initialize authentication middleware with JWT configuration.
	authMiddleware := middlewares.Auth(config.JWT)

	// Define API routes under /api.
	r.Route("/api", func(r chi.Router) {
		// Public routes (no authentication required).
		r.Route("/user", func(r chi.Router) {
			r.Post("/register", authHandler.Register) // endpoint for user registration
			r.Post("/login", authHandler.Login)       // endpoint for user login
		})

		// Protected routes (require authentication).
		r.Group(func(r chi.Router) {
			r.Use(authMiddleware) // apply authentication middleware to all routes in this group

			// Event-related routes
			r.Route("/events", func(r chi.Router) {
				r.Post("/", eventHandler.Create)       // create a new event
				r.Put("/{id}", eventHandler.Update)    // update an existing event by ID
				r.Delete("/{id}", eventHandler.Delete) // delete an event by ID
				r.Get("/day", eventHandler.GetDay)     // retrieve events for a specific day
				r.Get("/week", eventHandler.GetWeek)   // retrieve events for a specific week
				r.Get("/month", eventHandler.GetMonth) // retrieve events for a specific month
			})
		})
	})

	return r
}
